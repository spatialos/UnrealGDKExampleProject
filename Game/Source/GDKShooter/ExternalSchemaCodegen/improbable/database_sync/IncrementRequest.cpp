// Generated by Unreal External Schema Codegen

#include "IncrementRequest.h"
#include <set>
#include "../../MapEquals.h"

// Generated from C:\DEV\UnrealGDKExampleProject\Game\Plugins\UnrealGDK\SpatialGDK\Build\Scripts\dbsync\database_sync.schema(117,1)
namespace improbable {
namespace database_sync {

IncrementRequest::IncrementRequest(
	const FString& Path, 
	int64 Amount, 
	const FString& WorkerId)
: _Path{ Path }
, _Amount{ Amount }
, _WorkerId{ WorkerId } {}

IncrementRequest::IncrementRequest() {}

bool IncrementRequest::operator==(const IncrementRequest& Value) const
{
	return _Path == Value._Path && 
	_Amount == Value._Amount && 
	_WorkerId == Value._WorkerId;
}

bool IncrementRequest::operator!=(const IncrementRequest& Value) const
{
	return !operator== (Value);
}

const FString& IncrementRequest::GetPath() const
{
	return _Path;
}

FString& IncrementRequest::GetPath()
{
	return _Path; 
}

IncrementRequest& IncrementRequest::SetPath(const FString& Value)
{
	_Path = Value;
	return *this;
}

int64 IncrementRequest::GetAmount() const
{
	return _Amount;
}

int64& IncrementRequest::GetAmount()
{
	return _Amount; 
}

IncrementRequest& IncrementRequest::SetAmount(int64 Value)
{
	_Amount = Value;
	return *this;
}

const FString& IncrementRequest::GetWorkerId() const
{
	return _WorkerId;
}

FString& IncrementRequest::GetWorkerId()
{
	return _WorkerId; 
}

IncrementRequest& IncrementRequest::SetWorkerId(const FString& Value)
{
	_WorkerId = Value;
	return *this;
}

void IncrementRequest::Serialize(Schema_Object* SchemaObject) const
{
	// serializing field Path = 1
	::improbable::utils::AddString(SchemaObject, 1, _Path);
	// serializing field Amount = 2
	Schema_AddInt64(SchemaObject, 2, _Amount);
	// serializing field WorkerId = 3
	::improbable::utils::AddString(SchemaObject, 3, _WorkerId);
}

IncrementRequest IncrementRequest::Deserialize(Schema_Object* SchemaObject)
{
	IncrementRequest Data;
	
	// deserializing field Path = 1
	Data._Path = ::improbable::utils::GetString(SchemaObject, 1);
	
	// deserializing field Amount = 2
	Data._Amount = Schema_GetInt64(SchemaObject, 2);
	
	// deserializing field WorkerId = 3
	Data._WorkerId = ::improbable::utils::GetString(SchemaObject, 3);
	
	return Data;
}

uint32 GetTypeHash(const improbable::database_sync::IncrementRequest& Value)
{
	uint32 Result = 1327;
	Result = (Result * 977) + ::GetTypeHash(Value.GetPath());
	Result = (Result * 977) + ::GetTypeHash(Value.GetAmount());
	Result = (Result * 977) + ::GetTypeHash(Value.GetWorkerId());
	return Result;
}

} // namespace database_sync
} // namespace improbable
