// Generated by Unreal External Schema Codegen

#include "AssociatePathWithClientRequest.h"
#include <set>
#include "../../MapEquals.h"

// Generated from C:\DEV\UnrealGDKExampleProject\Game\Plugins\UnrealGDK\SpatialGDK\Build\Scripts\dbsync\database_sync.schema(213,1)
namespace improbable {
namespace database_sync {

AssociatePathWithClientRequest::AssociatePathWithClientRequest(
	const FString& Path, 
	const FString& ClientWorkerId)
: _Path{ Path }
, _ClientWorkerId{ ClientWorkerId } {}

AssociatePathWithClientRequest::AssociatePathWithClientRequest() {}

bool AssociatePathWithClientRequest::operator==(const AssociatePathWithClientRequest& Value) const
{
	return _Path == Value._Path && 
	_ClientWorkerId == Value._ClientWorkerId;
}

bool AssociatePathWithClientRequest::operator!=(const AssociatePathWithClientRequest& Value) const
{
	return !operator== (Value);
}

const FString& AssociatePathWithClientRequest::GetPath() const
{
	return _Path;
}

FString& AssociatePathWithClientRequest::GetPath()
{
	return _Path; 
}

AssociatePathWithClientRequest& AssociatePathWithClientRequest::SetPath(const FString& Value)
{
	_Path = Value;
	return *this;
}

const FString& AssociatePathWithClientRequest::GetClientWorkerId() const
{
	return _ClientWorkerId;
}

FString& AssociatePathWithClientRequest::GetClientWorkerId()
{
	return _ClientWorkerId; 
}

AssociatePathWithClientRequest& AssociatePathWithClientRequest::SetClientWorkerId(const FString& Value)
{
	_ClientWorkerId = Value;
	return *this;
}

void AssociatePathWithClientRequest::Serialize(Schema_Object* SchemaObject) const
{
	// serializing field Path = 1
	::improbable::utils::AddString(SchemaObject, 1, _Path);
	// serializing field ClientWorkerId = 2
	::improbable::utils::AddString(SchemaObject, 2, _ClientWorkerId);
}

AssociatePathWithClientRequest AssociatePathWithClientRequest::Deserialize(Schema_Object* SchemaObject)
{
	AssociatePathWithClientRequest Data;
	
	// deserializing field Path = 1
	Data._Path = ::improbable::utils::GetString(SchemaObject, 1);
	
	// deserializing field ClientWorkerId = 2
	Data._ClientWorkerId = ::improbable::utils::GetString(SchemaObject, 2);
	
	return Data;
}

uint32 GetTypeHash(const improbable::database_sync::AssociatePathWithClientRequest& Value)
{
	uint32 Result = 1327;
	Result = (Result * 977) + ::GetTypeHash(Value.GetPath());
	Result = (Result * 977) + ::GetTypeHash(Value.GetClientWorkerId());
	return Result;
}

} // namespace database_sync
} // namespace improbable
