// Generated by Unreal External Schema Codegen

#pragma once

#include "CoreMinimal.h"
#include "Utils/SchemaOption.h"
#include <WorkerSDK/improbable/c_schema.h>
#include <WorkerSDK/improbable/c_worker.h>

#include "../../ExternalSchemaHelperFunctions.h"

#include "../../improbable/database_sync/DatabaseSyncItem.h"

namespace improbable {
namespace database_sync {

// Generated from C:\DEV\UnrealGDKExampleProject\Game\Plugins\UnrealGDK\SpatialGDK\Build\Scripts\dbsync\database_sync.schema(320,1)
class HydrationTest : public improbable::SpatialComponent
{
public:
	static const Worker_ComponentId ComponentId = 1903;
	// Creates a new instance with specified arguments for each field.
	HydrationTest(const FString& ProfileId, int64 ValueField1, int64 ValueField2, const TArray<::improbable::database_sync::DatabaseSyncItem>& ItemList);
	// Creates a new instance with default values for each field.
	HydrationTest();
	// Creates a new instance with default values for each field. This is
	// equivalent to a default-constructed instance.
	static HydrationTest Create() { return {}; }
	// Copyable and movable.
	HydrationTest(HydrationTest&&) = default;
	HydrationTest(const HydrationTest&) = default;
	HydrationTest& operator=(HydrationTest&&) = default;
	HydrationTest& operator=(const HydrationTest&) = default;
	~HydrationTest() = default;
	
	bool operator==(const HydrationTest&) const;
	bool operator!=(const HydrationTest&) const;
	
	// Serialize this object data into the C API argument
	void Serialize(Schema_ComponentData* ComponentData) const override;
	
	// Deserialize the C API object argument into an instance of this class and return it
	static HydrationTest Deserialize(Schema_ComponentData* ComponentData);
	
	// Field ProfileId = 1
	const FString& GetProfileId() const;
	FString& GetProfileId();
	HydrationTest& SetProfileId(const FString&);
	
	// Field ValueField1 = 2
	int64 GetValueField1() const;
	int64& GetValueField1();
	HydrationTest& SetValueField1(int64);
	
	// Field ValueField2 = 3
	int64 GetValueField2() const;
	int64& GetValueField2();
	HydrationTest& SetValueField2(int64);
	
	// Field ItemList = 4
	const TArray<::improbable::database_sync::DatabaseSyncItem>& GetItemList() const;
	TArray<::improbable::database_sync::DatabaseSyncItem>& GetItemList();
	HydrationTest& SetItemList(const TArray<::improbable::database_sync::DatabaseSyncItem>&);
	
private:
	FString _ProfileId;
	int64 _ValueField1;
	int64 _ValueField2;
	TArray<::improbable::database_sync::DatabaseSyncItem> _ItemList;

public:
	class Update : public improbable::SpatialComponentUpdate
	{
	public:
		// Creates a new instance with default values for each field.
		Update() = default;
		// Creates a new instance with default values for each field. This is
		// equivalent to a default-constructed instance.
		static Update Create() { return {}; }
		// Copyable and movable.
		Update(Update&&) = default;
		Update(const Update&) = default;
		Update& operator=(Update&&) = default;
		Update& operator=(const Update&) = default;
		~Update() = default;
		bool operator==(const Update&) const;
		bool operator!=(const Update&) const;
		
		// Creates an Update from a HydrationTest object.
		static Update FromInitialData(const HydrationTest& Data);
		
		/**
		 * Converts to a HydrationTest
		 * object. It is an error to call this function unless *all* of the optional fields in this
		 * update are filled in.
		 */
		HydrationTest ToInitialData() const;
		
		/**
		 * Replaces fields in the given HydrationTest
		 * object with the corresponding fields in this update, where present.
		 */
		void ApplyTo(HydrationTest&) const;
		
		// Serialize this update object data into the C API component update argument
		void Serialize(Schema_ComponentUpdate* ComponentUpdate) const override;
		
		// Deserialize the C API component update argument into an instance of this class and return it
		static Update Deserialize(Schema_ComponentUpdate* ComponentUpdate);
		
		// Field ProfileId = 1
		const SpatialGDK::TSchemaOption<FString>& GetProfileId() const;
		SpatialGDK::TSchemaOption<FString>& GetProfileId();
		HydrationTest::Update& SetProfileId(const FString&);
		
		// Field ValueField1 = 2
		const SpatialGDK::TSchemaOption<int64>& GetValueField1() const;
		SpatialGDK::TSchemaOption<int64>& GetValueField1();
		HydrationTest::Update& SetValueField1(int64);
		
		// Field ValueField2 = 3
		const SpatialGDK::TSchemaOption<int64>& GetValueField2() const;
		SpatialGDK::TSchemaOption<int64>& GetValueField2();
		HydrationTest::Update& SetValueField2(int64);
		
		// Field ItemList = 4
		const SpatialGDK::TSchemaOption<TArray<::improbable::database_sync::DatabaseSyncItem>>& GetItemList() const;
		SpatialGDK::TSchemaOption<TArray<::improbable::database_sync::DatabaseSyncItem>>& GetItemList();
		HydrationTest::Update& SetItemList(const TArray<::improbable::database_sync::DatabaseSyncItem>&);
		
	private:
		SpatialGDK::TSchemaOption<FString> _ProfileId;
		SpatialGDK::TSchemaOption<int64> _ValueField1;
		SpatialGDK::TSchemaOption<int64> _ValueField2;
		SpatialGDK::TSchemaOption<TArray<::improbable::database_sync::DatabaseSyncItem>> _ItemList;
	};

	using AddComponentOp = ::improbable::AddComponentOp<HydrationTest>;
	using RemoveComponentOp = ::improbable::RemoveComponentOp<HydrationTest>;
	using ComponentUpdateOp = ::improbable::ComponentUpdateOp<Update>;
	using AuthorityChangeOp = ::improbable::AuthorityChangeOp<HydrationTest>;
};

inline uint32 GetTypeHash(const HydrationTest& Value);

} // namespace database_sync
} // namespace improbable

