// Generated by Unreal External Schema Codegen

#include "GetMetricsResponse.h"
#include <set>
#include "../../MapEquals.h"

// Generated from C:\DEV\UnrealGDKExampleProject\Game\Plugins\UnrealGDK\SpatialGDK\Build\Scripts\dbsync\database_sync.schema(178,1)
namespace improbable {
namespace database_sync {

GetMetricsResponse::GetMetricsResponse(
	const TMap<uint32, int64>& CommandRequests, 
	const TMap<FString, int64>& Queries, 
	const TMap<FString, int64>& Database)
: _CommandRequests{ CommandRequests }
, _Queries{ Queries }
, _Database{ Database } {}

GetMetricsResponse::GetMetricsResponse() {}

bool GetMetricsResponse::operator==(const GetMetricsResponse& Value) const
{
	return _CommandRequests == Value._CommandRequests && 
	_Queries == Value._Queries && 
	_Database == Value._Database;
}

bool GetMetricsResponse::operator!=(const GetMetricsResponse& Value) const
{
	return !operator== (Value);
}

const TMap<uint32, int64>& GetMetricsResponse::GetCommandRequests() const
{
	return _CommandRequests;
}

TMap<uint32, int64>& GetMetricsResponse::GetCommandRequests()
{
	return _CommandRequests; 
}

GetMetricsResponse& GetMetricsResponse::SetCommandRequests(const TMap<uint32, int64>& Value)
{
	_CommandRequests = Value;
	return *this;
}

const TMap<FString, int64>& GetMetricsResponse::GetQueries() const
{
	return _Queries;
}

TMap<FString, int64>& GetMetricsResponse::GetQueries()
{
	return _Queries; 
}

GetMetricsResponse& GetMetricsResponse::SetQueries(const TMap<FString, int64>& Value)
{
	_Queries = Value;
	return *this;
}

const TMap<FString, int64>& GetMetricsResponse::GetDatabase() const
{
	return _Database;
}

TMap<FString, int64>& GetMetricsResponse::GetDatabase()
{
	return _Database; 
}

GetMetricsResponse& GetMetricsResponse::SetDatabase(const TMap<FString, int64>& Value)
{
	_Database = Value;
	return *this;
}

void GetMetricsResponse::Serialize(Schema_Object* SchemaObject) const
{
	// serializing field CommandRequests = 1
	for (const TPair<uint32, int64>& Pair : _CommandRequests)
	{
		Schema_Object* PairObj = Schema_AddObject(SchemaObject, 1);
		Schema_AddUint32(PairObj, SCHEMA_MAP_KEY_FIELD_ID, Pair.Key);
		Schema_AddInt64(PairObj, SCHEMA_MAP_VALUE_FIELD_ID, Pair.Value);
	}
	// serializing field Queries = 2
	for (const TPair<FString, int64>& Pair : _Queries)
	{
		Schema_Object* PairObj = Schema_AddObject(SchemaObject, 2);
		::improbable::utils::AddString(PairObj, SCHEMA_MAP_KEY_FIELD_ID, Pair.Key);
		Schema_AddInt64(PairObj, SCHEMA_MAP_VALUE_FIELD_ID, Pair.Value);
	}
	// serializing field Database = 3
	for (const TPair<FString, int64>& Pair : _Database)
	{
		Schema_Object* PairObj = Schema_AddObject(SchemaObject, 3);
		::improbable::utils::AddString(PairObj, SCHEMA_MAP_KEY_FIELD_ID, Pair.Key);
		Schema_AddInt64(PairObj, SCHEMA_MAP_VALUE_FIELD_ID, Pair.Value);
	}
}

GetMetricsResponse GetMetricsResponse::Deserialize(Schema_Object* SchemaObject)
{
	GetMetricsResponse Data;
	
	// deserializing field CommandRequests = 1
	{
		{
			Data._CommandRequests = TMap<uint32, int64>();
			auto MapEntryCount = Schema_GetObjectCount(SchemaObject, 1);
			for (uint32 i = 0; i < MapEntryCount; ++i)
			{
				Schema_Object* KvPair = Schema_IndexObject(SchemaObject, 1, i);
				auto Key = Schema_GetUint32(KvPair, SCHEMA_MAP_KEY_FIELD_ID);
				auto Value = Schema_GetInt64(KvPair, SCHEMA_MAP_VALUE_FIELD_ID);
				Data._CommandRequests[std::move(Key)] = std::move(Value);
			}
		}
	}
	
	// deserializing field Queries = 2
	{
		{
			Data._Queries = TMap<FString, int64>();
			auto MapEntryCount = Schema_GetObjectCount(SchemaObject, 2);
			for (uint32 i = 0; i < MapEntryCount; ++i)
			{
				Schema_Object* KvPair = Schema_IndexObject(SchemaObject, 2, i);
				auto Key = ::improbable::utils::GetString(KvPair, SCHEMA_MAP_KEY_FIELD_ID);
				auto Value = Schema_GetInt64(KvPair, SCHEMA_MAP_VALUE_FIELD_ID);
				Data._Queries[std::move(Key)] = std::move(Value);
			}
		}
	}
	
	// deserializing field Database = 3
	{
		{
			Data._Database = TMap<FString, int64>();
			auto MapEntryCount = Schema_GetObjectCount(SchemaObject, 3);
			for (uint32 i = 0; i < MapEntryCount; ++i)
			{
				Schema_Object* KvPair = Schema_IndexObject(SchemaObject, 3, i);
				auto Key = ::improbable::utils::GetString(KvPair, SCHEMA_MAP_KEY_FIELD_ID);
				auto Value = Schema_GetInt64(KvPair, SCHEMA_MAP_VALUE_FIELD_ID);
				Data._Database[std::move(Key)] = std::move(Value);
			}
		}
	}
	
	return Data;
}

uint32 GetTypeHash(const improbable::database_sync::GetMetricsResponse& Value)
{
	uint32 Result = 1327;
	for (const auto& pair : Value.GetCommandRequests())
	{
		Result += 1327 * (::GetTypeHash(pair.Key) + 977 * ::GetTypeHash(pair.Value));
	}
	for (const auto& pair : Value.GetQueries())
	{
		Result += 1327 * (::GetTypeHash(pair.Key) + 977 * ::GetTypeHash(pair.Value));
	}
	for (const auto& pair : Value.GetDatabase())
	{
		Result += 1327 * (::GetTypeHash(pair.Key) + 977 * ::GetTypeHash(pair.Value));
	}
	return Result;
}

} // namespace database_sync
} // namespace improbable
