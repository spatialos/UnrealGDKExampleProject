// Generated by Unreal External Schema Codegen

#pragma once

#include "CoreMinimal.h"
#include "Utils/SchemaOption.h"
#include <WorkerSDK/improbable/c_schema.h>
#include <WorkerSDK/improbable/c_worker.h>

#include "../../ExternalSchemaHelperFunctions.h"

namespace improbable {
namespace database_sync {

// Generated from C:\DEV\UnrealGDKExampleProject\Game\Plugins\UnrealGDK\SpatialGDK\Build\Scripts\dbsync\database_sync.schema(178,1)
class GetMetricsResponse : public improbable::SpatialType
{
public:
	// Creates a new instance with specified arguments for each field.
	GetMetricsResponse(const TMap<uint32, int64>& CommandRequests, const TMap<FString, int64>& Queries, const TMap<FString, int64>& Database);
	// Creates a new instance with default values for each field.
	GetMetricsResponse();
	// Creates a new instance with default values for each field. This is
	// equivalent to a default-constructed instance.
	static GetMetricsResponse Create() { return {}; }
	// Copyable and movable.
	GetMetricsResponse(GetMetricsResponse&&) = default;
	GetMetricsResponse(const GetMetricsResponse&) = default;
	GetMetricsResponse& operator=(GetMetricsResponse&&) = default;
	GetMetricsResponse& operator=(const GetMetricsResponse&) = default;
	~GetMetricsResponse() = default;
	
	bool operator==(const GetMetricsResponse&) const;
	bool operator!=(const GetMetricsResponse&) const;
	
	// Serialize this object data into the C API argument
	void Serialize(Schema_Object* SchemaObject) const override;
	
	// Deserialize the C API object argument into an instance of this class and return it
	static GetMetricsResponse Deserialize(Schema_Object* SchemaObject);
	
	// Field CommandRequests = 1
	const TMap<uint32, int64>& GetCommandRequests() const;
	TMap<uint32, int64>& GetCommandRequests();
	GetMetricsResponse& SetCommandRequests(const TMap<uint32, int64>&);
	
	// Field Queries = 2
	const TMap<FString, int64>& GetQueries() const;
	TMap<FString, int64>& GetQueries();
	GetMetricsResponse& SetQueries(const TMap<FString, int64>&);
	
	// Field Database = 3
	const TMap<FString, int64>& GetDatabase() const;
	TMap<FString, int64>& GetDatabase();
	GetMetricsResponse& SetDatabase(const TMap<FString, int64>&);
	
private:
	TMap<uint32, int64> _CommandRequests;
	TMap<FString, int64> _Queries;
	TMap<FString, int64> _Database;
};

inline uint32 GetTypeHash(const GetMetricsResponse& Value);

} // namespace database_sync
} // namespace improbable

