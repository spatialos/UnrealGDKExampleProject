// Generated by Unreal External Schema Codegen

#include "DatabaseSyncService.h"
#include <set>
#include "../../MapEquals.h"

// Generated from C:\DEV\UnrealGDKExampleProject\Game\Plugins\UnrealGDK\SpatialGDK\Build\Scripts\dbsync\database_sync.schema(263,1)
namespace improbable {
namespace database_sync {

DatabaseSyncService::DatabaseSyncService(
	const TArray<FString>& WriteWorkerAttributes)
: _WriteWorkerAttributes{ WriteWorkerAttributes } {}

DatabaseSyncService::DatabaseSyncService() {}

bool DatabaseSyncService::operator==(const DatabaseSyncService& Value) const
{
	return _WriteWorkerAttributes == Value._WriteWorkerAttributes;
}

bool DatabaseSyncService::operator!=(const DatabaseSyncService& Value) const
{
	return !operator== (Value);
}

const TArray<FString>& DatabaseSyncService::GetWriteWorkerAttributes() const
{
	return _WriteWorkerAttributes;
}

TArray<FString>& DatabaseSyncService::GetWriteWorkerAttributes()
{
	return _WriteWorkerAttributes; 
}

DatabaseSyncService& DatabaseSyncService::SetWriteWorkerAttributes(const TArray<FString>& Value)
{
	_WriteWorkerAttributes = Value;
	return *this;
}

void DatabaseSyncService::Serialize(Schema_ComponentData* ComponentData) const
{
	Schema_Object* FieldsObject = Schema_GetComponentDataFields(ComponentData);

	// serializing field WriteWorkerAttributes = 1
	for (const FString& Element : _WriteWorkerAttributes)
	{
		::improbable::utils::AddString(FieldsObject, 1, Element);
	}
}

DatabaseSyncService DatabaseSyncService::Deserialize(Schema_ComponentData* ComponentData)
{
	Schema_Object * FieldsObject = Schema_GetComponentDataFields(ComponentData);
	DatabaseSyncService Data;
	
	// deserializing field WriteWorkerAttributes = 1
	{
		Data._WriteWorkerAttributes = ::improbable::utils::GetStringList(FieldsObject, 1);
	}
	
	return Data;
}

bool DatabaseSyncService::Update::operator==(const DatabaseSyncService::Update& Value) const
{
	return _WriteWorkerAttributes == Value._WriteWorkerAttributes;
}

bool DatabaseSyncService::Update::operator!=(const DatabaseSyncService::Update& Value) const
{
	return !operator== (Value);
}

DatabaseSyncService::Update DatabaseSyncService::Update::FromInitialData(const DatabaseSyncService& Data)
{ 
	DatabaseSyncService::Update Update;
	Update._WriteWorkerAttributes = Data.GetWriteWorkerAttributes();
	return Update;
}

DatabaseSyncService DatabaseSyncService::Update::ToInitialData() const
{
	return DatabaseSyncService (
		*_WriteWorkerAttributes);
}         

void DatabaseSyncService::Update::ApplyTo(DatabaseSyncService& Data) const
{
	if (_WriteWorkerAttributes)
	{
		Data.SetWriteWorkerAttributes(*_WriteWorkerAttributes);
	}
}

const SpatialGDK::TSchemaOption<TArray<FString>>& DatabaseSyncService::Update::GetWriteWorkerAttributes() const
{
	return _WriteWorkerAttributes;
}

SpatialGDK::TSchemaOption<TArray<FString>>& DatabaseSyncService::Update::GetWriteWorkerAttributes()
{
	return _WriteWorkerAttributes;
}

DatabaseSyncService::Update& DatabaseSyncService::Update::SetWriteWorkerAttributes(const TArray<FString>& value)
{
	_WriteWorkerAttributes = value;
	return *this;
}

const TArray< ::improbable::database_sync::PathsUpdated >& DatabaseSyncService::Update::GetPathsUpdatedList() const
{
	return _PathsUpdatedList;
}

TArray< ::improbable::database_sync::PathsUpdated >& DatabaseSyncService::Update::GetPathsUpdatedList()
{
	return _PathsUpdatedList;
}

DatabaseSyncService::Update& DatabaseSyncService::Update::AddPathsUpdated(const ::improbable::database_sync::PathsUpdated& Value)
{
	_PathsUpdatedList.Add(Value);
	return *this;
}

void DatabaseSyncService::Update::Serialize(Schema_ComponentUpdate* ComponentUpdate) const
{
	Schema_Object* UpdatesObject = Schema_GetComponentUpdateFields(ComponentUpdate);
	Schema_Object* EventsObject = Schema_GetComponentUpdateEvents(ComponentUpdate);
	// serializing field WriteWorkerAttributes = 1
	if (_WriteWorkerAttributes.IsSet())
	{
		if (_WriteWorkerAttributes.GetValue().Num() == 0)
		{
			Schema_AddComponentUpdateClearedField(ComponentUpdate, 1);
		}
		else
		{
			for (const FString& Element : (*_WriteWorkerAttributes))
			{
				::improbable::utils::AddString(UpdatesObject, 1, Element);
			}
		}
	}
		// serializing event PathsUpdated = 1
		for (const ::improbable::database_sync::PathsUpdated& Element : _PathsUpdatedList)
		{
			Element.Serialize(Schema_AddObject(EventsObject, 1));
		}
}

DatabaseSyncService::Update DatabaseSyncService::Update::Deserialize(Schema_ComponentUpdate * ComponentUpdate)
{
	Schema_Object* UpdatesObject = Schema_GetComponentUpdateFields(ComponentUpdate);
	Schema_Object* EventsObject = Schema_GetComponentUpdateEvents(ComponentUpdate);
	auto FieldsToClear = new Schema_FieldId[Schema_GetComponentUpdateClearedFieldCount(ComponentUpdate)];
	Schema_GetComponentUpdateClearedFieldList(ComponentUpdate, FieldsToClear);
	std::set<Schema_FieldId> FieldsToClearSet(FieldsToClear, FieldsToClear + sizeof(FieldsToClear) / sizeof(Schema_FieldId));
	
	DatabaseSyncService::Update Data;
	
	// deserializing field WriteWorkerAttributes = 1
	if (Schema_GetBytesCount(UpdatesObject, 1) > 0)
	{
		(*Data._WriteWorkerAttributes) = ::improbable::utils::GetStringList(UpdatesObject, 1);
	}
	else if (FieldsToClearSet.count(1)) // only check if lists, maps, or options should be cleared
	{
		Data._WriteWorkerAttributes = {};
	}
	
	// deserializing event PathsUpdated = 1
	for (uint32 i = 0; i < Schema_GetObjectCount(EventsObject, 1); ++i)
	{
		Data.AddPathsUpdated(::improbable::database_sync::PathsUpdated::Deserialize(Schema_IndexObject(EventsObject, 1, i)));
	}
	
	return Data;
}

uint32 GetTypeHash(const improbable::database_sync::DatabaseSyncService& Value)
{
	uint32 Result = 1327;
	for (const auto& item : Value.GetWriteWorkerAttributes())
	{
		Result = (Result * 977) + ::GetTypeHash(item);
	}
	return Result;
}

} // namespace database_sync
} // namespace improbable
