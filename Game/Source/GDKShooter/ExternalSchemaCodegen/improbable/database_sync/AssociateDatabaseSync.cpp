// Generated by Unreal External Schema Codegen

#include "AssociateDatabaseSync.h"
#include <set>
#include "../../MapEquals.h"

// Generated from C:\DEV\UnrealGDKExampleProject\Game\Plugins\UnrealGDK\SpatialGDK\Build\Scripts\dbsync\database_sync.schema(48,1)
namespace improbable {
namespace database_sync {

AssociateDatabaseSync::AssociateDatabaseSync(
	int64 Count)
: _Count{ Count } {}

AssociateDatabaseSync::AssociateDatabaseSync() {}

bool AssociateDatabaseSync::operator==(const AssociateDatabaseSync& Value) const
{
	return _Count == Value._Count;
}

bool AssociateDatabaseSync::operator!=(const AssociateDatabaseSync& Value) const
{
	return !operator== (Value);
}

int64 AssociateDatabaseSync::GetCount() const
{
	return _Count;
}

int64& AssociateDatabaseSync::GetCount()
{
	return _Count; 
}

AssociateDatabaseSync& AssociateDatabaseSync::SetCount(int64 Value)
{
	_Count = Value;
	return *this;
}

void AssociateDatabaseSync::Serialize(Schema_ComponentData* ComponentData) const
{
	Schema_Object* FieldsObject = Schema_GetComponentDataFields(ComponentData);

	// serializing field Count = 1
	Schema_AddInt64(FieldsObject, 1, _Count);
}

AssociateDatabaseSync AssociateDatabaseSync::Deserialize(Schema_ComponentData* ComponentData)
{
	Schema_Object * FieldsObject = Schema_GetComponentDataFields(ComponentData);
	AssociateDatabaseSync Data;
	
	// deserializing field Count = 1
	Data._Count = Schema_GetInt64(FieldsObject, 1);
	
	return Data;
}

bool AssociateDatabaseSync::Update::operator==(const AssociateDatabaseSync::Update& Value) const
{
	return _Count == Value._Count;
}

bool AssociateDatabaseSync::Update::operator!=(const AssociateDatabaseSync::Update& Value) const
{
	return !operator== (Value);
}

AssociateDatabaseSync::Update AssociateDatabaseSync::Update::FromInitialData(const AssociateDatabaseSync& Data)
{ 
	AssociateDatabaseSync::Update Update;
	Update._Count = Data.GetCount();
	return Update;
}

AssociateDatabaseSync AssociateDatabaseSync::Update::ToInitialData() const
{
	return AssociateDatabaseSync (
		*_Count);
}         

void AssociateDatabaseSync::Update::ApplyTo(AssociateDatabaseSync& Data) const
{
	if (_Count)
	{
		Data.SetCount(*_Count);
	}
}

const SpatialGDK::TSchemaOption<int64>& AssociateDatabaseSync::Update::GetCount() const
{
	return _Count;
}

SpatialGDK::TSchemaOption<int64>& AssociateDatabaseSync::Update::GetCount()
{
	return _Count;
}

AssociateDatabaseSync::Update& AssociateDatabaseSync::Update::SetCount(int64 value)
{
	_Count = value;
	return *this;
}

void AssociateDatabaseSync::Update::Serialize(Schema_ComponentUpdate* ComponentUpdate) const
{
	Schema_Object* UpdatesObject = Schema_GetComponentUpdateFields(ComponentUpdate);
	// serializing field Count = 1
	if (_Count.IsSet())
	{
		Schema_AddInt64(UpdatesObject, 1, (*_Count));
	}
}

AssociateDatabaseSync::Update AssociateDatabaseSync::Update::Deserialize(Schema_ComponentUpdate * ComponentUpdate)
{
	Schema_Object* UpdatesObject = Schema_GetComponentUpdateFields(ComponentUpdate);
	auto FieldsToClear = new Schema_FieldId[Schema_GetComponentUpdateClearedFieldCount(ComponentUpdate)];
	Schema_GetComponentUpdateClearedFieldList(ComponentUpdate, FieldsToClear);
	std::set<Schema_FieldId> FieldsToClearSet(FieldsToClear, FieldsToClear + sizeof(FieldsToClear) / sizeof(Schema_FieldId));
	
	AssociateDatabaseSync::Update Data;
	
	// deserializing field Count = 1
	if (Schema_GetInt64Count(UpdatesObject, 1) > 0)
	{
		Data._Count = Schema_GetInt64(UpdatesObject, 1);
	}
	
	return Data;
}

uint32 GetTypeHash(const improbable::database_sync::AssociateDatabaseSync& Value)
{
	uint32 Result = 1327;
	Result = (Result * 977) + ::GetTypeHash(Value.GetCount());
	return Result;
}

} // namespace database_sync
} // namespace improbable
