// Generated by Unreal External Schema Codegen

#pragma once

#include "CoreMinimal.h"
#include "Utils/SchemaOption.h"
#include <WorkerSDK/improbable/c_schema.h>
#include <WorkerSDK/improbable/c_worker.h>

#include "../../ExternalSchemaHelperFunctions.h"

namespace improbable {
namespace database_sync {

// Generated from C:\DEV\UnrealGDKExampleProject\Game\Plugins\UnrealGDK\SpatialGDK\Build\Scripts\dbsync\database_sync.schema(59,1)
class DatabaseSyncItem : public improbable::SpatialType
{
public:
	// Creates a new instance with specified arguments for each field.
	DatabaseSyncItem(const FString& Name, int64 Count, const FString& Path);
	// Creates a new instance with default values for each field.
	DatabaseSyncItem();
	// Creates a new instance with default values for each field. This is
	// equivalent to a default-constructed instance.
	static DatabaseSyncItem Create() { return {}; }
	// Copyable and movable.
	DatabaseSyncItem(DatabaseSyncItem&&) = default;
	DatabaseSyncItem(const DatabaseSyncItem&) = default;
	DatabaseSyncItem& operator=(DatabaseSyncItem&&) = default;
	DatabaseSyncItem& operator=(const DatabaseSyncItem&) = default;
	~DatabaseSyncItem() = default;
	
	bool operator==(const DatabaseSyncItem&) const;
	bool operator!=(const DatabaseSyncItem&) const;
	
	// Serialize this object data into the C API argument
	void Serialize(Schema_Object* SchemaObject) const override;
	
	// Deserialize the C API object argument into an instance of this class and return it
	static DatabaseSyncItem Deserialize(Schema_Object* SchemaObject);
	
	// Field Name = 1
	const FString& GetName() const;
	FString& GetName();
	DatabaseSyncItem& SetName(const FString&);
	
	// Field Count = 2
	int64 GetCount() const;
	int64& GetCount();
	DatabaseSyncItem& SetCount(int64);
	
	// Field Path = 3
	const FString& GetPath() const;
	FString& GetPath();
	DatabaseSyncItem& SetPath(const FString&);
	
private:
	FString _Name;
	int64 _Count;
	FString _Path;
};

inline uint32 GetTypeHash(const DatabaseSyncItem& Value);

} // namespace database_sync
} // namespace improbable

