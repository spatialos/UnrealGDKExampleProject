// Generated by Unreal External Schema Codegen

#include "DatabaseSyncReference.h"
#include <set>
#include "../../MapEquals.h"

// Generated from C:\DEV\UnrealGDKExampleProject\Game\Plugins\UnrealGDK\SpatialGDK\Build\Scripts\dbsync\database_sync.schema(42,1)
namespace improbable {
namespace database_sync {

DatabaseSyncReference::DatabaseSyncReference(
	const FString& Path)
: _Path{ Path } {}

DatabaseSyncReference::DatabaseSyncReference() {}

bool DatabaseSyncReference::operator==(const DatabaseSyncReference& Value) const
{
	return _Path == Value._Path;
}

bool DatabaseSyncReference::operator!=(const DatabaseSyncReference& Value) const
{
	return !operator== (Value);
}

const FString& DatabaseSyncReference::GetPath() const
{
	return _Path;
}

FString& DatabaseSyncReference::GetPath()
{
	return _Path; 
}

DatabaseSyncReference& DatabaseSyncReference::SetPath(const FString& Value)
{
	_Path = Value;
	return *this;
}

void DatabaseSyncReference::Serialize(Schema_ComponentData* ComponentData) const
{
	Schema_Object* FieldsObject = Schema_GetComponentDataFields(ComponentData);

	// serializing field Path = 1
	::improbable::utils::AddString(FieldsObject, 1, _Path);
}

DatabaseSyncReference DatabaseSyncReference::Deserialize(Schema_ComponentData* ComponentData)
{
	Schema_Object * FieldsObject = Schema_GetComponentDataFields(ComponentData);
	DatabaseSyncReference Data;
	
	// deserializing field Path = 1
	Data._Path = ::improbable::utils::GetString(FieldsObject, 1);
	
	return Data;
}

bool DatabaseSyncReference::Update::operator==(const DatabaseSyncReference::Update& Value) const
{
	return _Path == Value._Path;
}

bool DatabaseSyncReference::Update::operator!=(const DatabaseSyncReference::Update& Value) const
{
	return !operator== (Value);
}

DatabaseSyncReference::Update DatabaseSyncReference::Update::FromInitialData(const DatabaseSyncReference& Data)
{ 
	DatabaseSyncReference::Update Update;
	Update._Path = Data.GetPath();
	return Update;
}

DatabaseSyncReference DatabaseSyncReference::Update::ToInitialData() const
{
	return DatabaseSyncReference (
		*_Path);
}         

void DatabaseSyncReference::Update::ApplyTo(DatabaseSyncReference& Data) const
{
	if (_Path)
	{
		Data.SetPath(*_Path);
	}
}

const SpatialGDK::TSchemaOption<FString>& DatabaseSyncReference::Update::GetPath() const
{
	return _Path;
}

SpatialGDK::TSchemaOption<FString>& DatabaseSyncReference::Update::GetPath()
{
	return _Path;
}

DatabaseSyncReference::Update& DatabaseSyncReference::Update::SetPath(const FString& value)
{
	_Path = value;
	return *this;
}

void DatabaseSyncReference::Update::Serialize(Schema_ComponentUpdate* ComponentUpdate) const
{
	Schema_Object* UpdatesObject = Schema_GetComponentUpdateFields(ComponentUpdate);
	// serializing field Path = 1
	if (_Path.IsSet())
	{
		::improbable::utils::AddString(UpdatesObject, 1, (*_Path));
	}
}

DatabaseSyncReference::Update DatabaseSyncReference::Update::Deserialize(Schema_ComponentUpdate * ComponentUpdate)
{
	Schema_Object* UpdatesObject = Schema_GetComponentUpdateFields(ComponentUpdate);
	auto FieldsToClear = new Schema_FieldId[Schema_GetComponentUpdateClearedFieldCount(ComponentUpdate)];
	Schema_GetComponentUpdateClearedFieldList(ComponentUpdate, FieldsToClear);
	std::set<Schema_FieldId> FieldsToClearSet(FieldsToClear, FieldsToClear + sizeof(FieldsToClear) / sizeof(Schema_FieldId));
	
	DatabaseSyncReference::Update Data;
	
	// deserializing field Path = 1
	if (Schema_GetBytesCount(UpdatesObject, 1) > 0)
	{
		Data._Path = ::improbable::utils::GetString(UpdatesObject, 1);
	}
	
	return Data;
}

uint32 GetTypeHash(const improbable::database_sync::DatabaseSyncReference& Value)
{
	uint32 Result = 1327;
	Result = (Result * 977) + ::GetTypeHash(Value.GetPath());
	return Result;
}

} // namespace database_sync
} // namespace improbable
