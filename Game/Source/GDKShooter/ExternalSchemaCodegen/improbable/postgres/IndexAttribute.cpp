// Generated by Unreal External Schema Codegen

#include "IndexAttribute.h"
#include <set>
#include "../../MapEquals.h"

// Generated from C:\DEV\UnrealGDKExampleProject\Game\Plugins\UnrealGDK\SpatialGDK\Build\Scripts\dbsync\postgres.schema(9,1)
namespace improbable {
namespace postgres {

IndexAttribute::IndexAttribute(
	const FString& IndexCommand)
: _IndexCommand{ IndexCommand } {}

IndexAttribute::IndexAttribute() {}

bool IndexAttribute::operator==(const IndexAttribute& Value) const
{
	return _IndexCommand == Value._IndexCommand;
}

bool IndexAttribute::operator!=(const IndexAttribute& Value) const
{
	return !operator== (Value);
}

const FString& IndexAttribute::GetIndexCommand() const
{
	return _IndexCommand;
}

FString& IndexAttribute::GetIndexCommand()
{
	return _IndexCommand; 
}

IndexAttribute& IndexAttribute::SetIndexCommand(const FString& Value)
{
	_IndexCommand = Value;
	return *this;
}

void IndexAttribute::Serialize(Schema_Object* SchemaObject) const
{
	// serializing field IndexCommand = 1
	::improbable::utils::AddString(SchemaObject, 1, _IndexCommand);
}

IndexAttribute IndexAttribute::Deserialize(Schema_Object* SchemaObject)
{
	IndexAttribute Data;
	
	// deserializing field IndexCommand = 1
	Data._IndexCommand = ::improbable::utils::GetString(SchemaObject, 1);
	
	return Data;
}

uint32 GetTypeHash(const improbable::postgres::IndexAttribute& Value)
{
	uint32 Result = 1327;
	Result = (Result * 977) + ::GetTypeHash(Value.GetIndexCommand());
	return Result;
}

} // namespace postgres
} // namespace improbable
