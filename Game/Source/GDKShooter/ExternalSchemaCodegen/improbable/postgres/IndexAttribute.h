// Generated by Unreal External Schema Codegen

#pragma once

#include "CoreMinimal.h"
#include "Utils/SchemaOption.h"
#include <WorkerSDK/improbable/c_schema.h>
#include <WorkerSDK/improbable/c_worker.h>

#include "../../ExternalSchemaHelperFunctions.h"

namespace improbable {
namespace postgres {

// Generated from C:\DEV\UnrealGDKExampleProject\Game\Plugins\UnrealGDK\SpatialGDK\Build\Scripts\dbsync\postgres.schema(9,1)
class IndexAttribute : public improbable::SpatialType
{
public:
	// Creates a new instance with specified arguments for each field.
	IndexAttribute(const FString& IndexCommand);
	// Creates a new instance with default values for each field.
	IndexAttribute();
	// Creates a new instance with default values for each field. This is
	// equivalent to a default-constructed instance.
	static IndexAttribute Create() { return {}; }
	// Copyable and movable.
	IndexAttribute(IndexAttribute&&) = default;
	IndexAttribute(const IndexAttribute&) = default;
	IndexAttribute& operator=(IndexAttribute&&) = default;
	IndexAttribute& operator=(const IndexAttribute&) = default;
	~IndexAttribute() = default;
	
	bool operator==(const IndexAttribute&) const;
	bool operator!=(const IndexAttribute&) const;
	
	// Serialize this object data into the C API argument
	void Serialize(Schema_Object* SchemaObject) const override;
	
	// Deserialize the C API object argument into an instance of this class and return it
	static IndexAttribute Deserialize(Schema_Object* SchemaObject);
	
	// Field IndexCommand = 1
	const FString& GetIndexCommand() const;
	FString& GetIndexCommand();
	IndexAttribute& SetIndexCommand(const FString&);
	
private:
	FString _IndexCommand;
};

inline uint32 GetTypeHash(const IndexAttribute& Value);

} // namespace postgres
} // namespace improbable

