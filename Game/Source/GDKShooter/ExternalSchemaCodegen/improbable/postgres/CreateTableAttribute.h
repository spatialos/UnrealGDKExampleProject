// Generated by Unreal External Schema Codegen

#pragma once

#include "CoreMinimal.h"
#include "Utils/SchemaOption.h"
#include <WorkerSDK/improbable/c_schema.h>
#include <WorkerSDK/improbable/c_worker.h>

#include "../../ExternalSchemaHelperFunctions.h"

namespace improbable {
namespace postgres {

// Generated from C:\DEV\UnrealGDKExampleProject\Game\Plugins\UnrealGDK\SpatialGDK\Build\Scripts\dbsync\postgres.schema(3,1)
class CreateTableAttribute : public improbable::SpatialType
{
public:
	// Creates a new instance with specified arguments for each field.
	CreateTableAttribute(const TArray<FString>& Setup);
	// Creates a new instance with default values for each field.
	CreateTableAttribute();
	// Creates a new instance with default values for each field. This is
	// equivalent to a default-constructed instance.
	static CreateTableAttribute Create() { return {}; }
	// Copyable and movable.
	CreateTableAttribute(CreateTableAttribute&&) = default;
	CreateTableAttribute(const CreateTableAttribute&) = default;
	CreateTableAttribute& operator=(CreateTableAttribute&&) = default;
	CreateTableAttribute& operator=(const CreateTableAttribute&) = default;
	~CreateTableAttribute() = default;
	
	bool operator==(const CreateTableAttribute&) const;
	bool operator!=(const CreateTableAttribute&) const;
	
	// Serialize this object data into the C API argument
	void Serialize(Schema_Object* SchemaObject) const override;
	
	// Deserialize the C API object argument into an instance of this class and return it
	static CreateTableAttribute Deserialize(Schema_Object* SchemaObject);
	
	// Field Setup = 1
	const TArray<FString>& GetSetup() const;
	TArray<FString>& GetSetup();
	CreateTableAttribute& SetSetup(const TArray<FString>&);
	
private:
	TArray<FString> _Setup;
};

inline uint32 GetTypeHash(const CreateTableAttribute& Value);

} // namespace postgres
} // namespace improbable

