// Generated by Unreal External Schema Codegen

#include "ExternalSchemaHelperFunctions.h"

namespace improbable {
namespace utils {

void AddBytes(Schema_Object* SchemaObject, Schema_FieldId FieldId, const TArray<uint8>& Value)
{
	uint32 BytesLength = Value.Num();
	uint8* ByteBuffer = Schema_AllocateBuffer(SchemaObject, BytesLength);
	memcpy(ByteBuffer, Value.GetData(), BytesLength);
	Schema_AddBytes(SchemaObject, FieldId, ByteBuffer, BytesLength);
}

void AddString(Schema_Object* SchemaObject, Schema_FieldId FieldId, FString Value)
{
	const char* Text = TCHAR_TO_ANSI(*Value);
	uint32 TextLength = sizeof(char) * strlen(Text); // ensure to exclude null-terminator
	uint8* TextBuffer = Schema_AllocateBuffer(SchemaObject, TextLength);
	memcpy(TextBuffer, Text, TextLength);
	Schema_AddBytes(SchemaObject, FieldId, TextBuffer, TextLength);
}

TArray<uint8> GetBytes(const Schema_Object* SchemaObject, Schema_FieldId FieldId)
{
	uint32 BytesLength = Schema_GetBytesLength(SchemaObject, FieldId);
	const uint8* Bytes = Schema_GetBytes(SchemaObject, FieldId);
	return TArray<uint8>(Bytes, BytesLength);
}

FString GetString(const Schema_Object* SchemaObject, Schema_FieldId FieldId)
{
	uint32 TextLength = Schema_GetBytesLength(SchemaObject, FieldId);
	const uint8* Text = Schema_GetBytes(SchemaObject, FieldId);
	return FString(TextLength, ANSI_TO_TCHAR(reinterpret_cast<const char*>(Text)));
}

TArray<TArray<uint8>> GetBytesList(const Schema_Object* SchemaObject, Schema_FieldId FieldId)
{
	TArray<TArray<uint8>> BytesList{};
	auto ListSize =  Schema_GetBytesCount(SchemaObject, FieldId);
	for (uint32 i = 0; i < ListSize; ++i)
	{
		uint32 BytesLength = Schema_IndexBytesLength(SchemaObject, FieldId, i);
		const uint8* Bytes = Schema_IndexBytes(SchemaObject, FieldId, i);
		BytesList.Add(TArray<uint8>(Bytes, BytesLength));
	}
	return BytesList;
}

TArray<FString> GetStringList(const Schema_Object* SchemaObject, Schema_FieldId FieldId)
{
		TArray<FString> StringList{};
		auto ListSize =  Schema_GetBytesCount(SchemaObject, FieldId);
		for (uint32 i = 0; i < ListSize; ++i)
		{
			uint32 TextLength = Schema_IndexBytesLength(SchemaObject, FieldId, i);
			const uint8* Text = Schema_IndexBytes(SchemaObject, FieldId, i);
			StringList.Add(FString(TextLength, ANSI_TO_TCHAR(reinterpret_cast<const char*>(Text))));
		}
		return StringList;
}

} // namespace utils
} // namespace improbable

uint32 GetTypeHash(const TArray<uint8>& Value)
{
	size_t Result = 1327;
	for (const auto& item : Value)
	{
		Result = (Result * 977) + GetTypeHash(item);
	}
	return Result;
}
