// Generated by Unreal External Schema Codegen

#pragma once

#include <cstddef>
#include <cstdint>
#include <functional>
#include <string>
#include <vector>
#include <WorkerSDK/improbable/c_schema.h>
#include <WorkerSDK/improbable/c_worker.h>

#include "CoreMinimal.h"

namespace improbable {

class SpatialType
{
public:
	virtual ~SpatialType() = 0 {};
	virtual void Serialize(Schema_Object* SchemaObject) const = 0;
};

class SpatialComponent
{
public:
	virtual ~SpatialComponent() = 0 {};
	virtual void Serialize(Schema_ComponentData* ComponentData) const = 0;
};

class SpatialComponentUpdate
{
public:
	virtual ~SpatialComponentUpdate() = 0 {};
	virtual void Serialize(Schema_ComponentUpdate* ComponentUpdate) const = 0;
};

class ExternalSchemaOp
{
public:
	ExternalSchemaOp(Worker_EntityId EntityId) : EntityId{ EntityId } {}
	Worker_EntityId EntityId;
	virtual ~ExternalSchemaOp() = 0 {};
};

template<typename ComponentData>
class AddComponentOp : public ::improbable::ExternalSchemaOp
{
public:
	AddComponentOp(
		Worker_EntityId EntityId, 
		Worker_ComponentId ComponentId, 
		const ComponentData& Data) 
	: ExternalSchemaOp( EntityId )
	, ComponentId(ComponentId )
	, Data( Data ) {}
	
	Worker_ComponentId ComponentId; 
	ComponentData Data;
};

template<typename ComponentClass>
class RemoveComponentOp : public ::improbable::ExternalSchemaOp 
{
public:
	RemoveComponentOp(
		Worker_EntityId EntityId, 
		Worker_ComponentId ComponentId)
	: ExternalSchemaOp( EntityId )
	, ComponentId( ComponentId ) {}
	
	Worker_ComponentId ComponentId;
};

template<typename ComponentUpdate>
class ComponentUpdateOp : public ::improbable::ExternalSchemaOp
{
public:
	ComponentUpdateOp(
		Worker_EntityId EntityId, 
		Worker_ComponentId ComponentId, 
		const ComponentUpdate& Update)
	: ExternalSchemaOp(EntityId)
	, ComponentId(ComponentId)
	, Update(Update) {}
	
	Worker_ComponentId ComponentId;
	ComponentUpdate Update;
};

template<typename T> // just to differentiate type aliases
class AuthorityChangeOp : public ::improbable::ExternalSchemaOp
{
public:
	AuthorityChangeOp(
		Worker_EntityId EntityId, 
		Worker_ComponentId ComponentId, Worker_Authority Authority)
	: ExternalSchemaOp( EntityId )
	, ComponentId( ComponentId )
	, Authority( Authority ) {}
	
	Worker_ComponentId ComponentId;
	Worker_Authority Authority;
};

template<typename RequestData>
class CommandRequestOp : public ::improbable::ExternalSchemaOp
{
public:
	CommandRequestOp(
		Worker_EntityId EntityId, 
		Worker_RequestId RequestId,
		uint32_t TimeoutMillis, 
		const char* CallerWorkerId, 
		Worker_WorkerAttributes CallerAttributeSet, 
		const RequestData& Data)
	: ExternalSchemaOp(EntityId)
	, RequestId(RequestId)
	, TimeoutMillis(TimeoutMillis)
	, CallerWorkerId(CallerWorkerId)
	, CallerAttributeSet(CallerAttributeSet)
	, Data(Data) {}
	
	Worker_RequestId RequestId;
	uint32_t TimeoutMillis;
	const char* CallerWorkerId;
	Worker_WorkerAttributes CallerAttributeSet;
	RequestData Data;
};

template<typename ResponseData>
class CommandResponseOp : public ::improbable::ExternalSchemaOp
{
public:
	CommandResponseOp(Worker_EntityId EntityId, 
		Worker_RequestId RequestId, 
		uint8_t StatusCode, 
		const char* Message, 
		uint32_t CommandId, 
		const ResponseData& Data) 
	: ExternalSchemaOp(EntityId)
	, RequestId(RequestId)
	, StatusCode(StatusCode)
	, Message(Message)
	, CommandId(CommandId)
	, Data(Data) {}
	
	Worker_RequestId RequestId;
	uint8_t StatusCode;
	const char* Message;
	uint32_t CommandId;
	ResponseData Data;
};

namespace utils {
	// Utility methods for serializing and deserializing string fields
	void AddBytes(Schema_Object* SchemaObject, Schema_FieldId FieldId, const TArray<uint8>& Value);
	void AddString(Schema_Object* SchemaObject, Schema_FieldId FieldId, FString Value);
	TArray<uint8> GetBytes(const Schema_Object* SchemaObject, Schema_FieldId FieldId);
	FString GetString(const Schema_Object* SchemaObject, Schema_FieldId FieldId);
	TArray<FString> GetStringList(const Schema_Object* SchemaObject, Schema_FieldId FieldId);
	TArray<TArray<uint8>> GetBytesList(const Schema_Object* SchemaObject, Schema_FieldId FieldId);
} // namespace utils
} // namespace improbable

inline uint32 GetTypeHash(const TArray<uint8>& Value);
